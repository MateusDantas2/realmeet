openapi: 3.0.0
info:
  version: 1.0.0
  title: realmeet
servers:
  - url: 'http://localhost:3000'

paths:
  /rooms/{id}:
    get:
      summary: 'Return a room by ID'
      operationId: getRoom
      tags:
        - room
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: id
          in: path
          required: true
          description: ID of the room
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDTO'
        404:
          description: Not Found

    delete:
      summary: 'Deletes a room by ID'
      operationId: deleteRoom
      tags:
        - room
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: id
          in: path
          required: true
          description: ID of the room
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: 'Deleted Successfully'
        404:
          description: Not Found

    put:
      summary: 'Updates a room by ID'
      operationId: updateRoom
      tags:
        - room
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: id
          in: path
          required: true
          description: ID of the room
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomDTO'
        required: true
      responses:
        204:
          description: 'Updated Successfully'
        404:
          description: Not Found
        422:
          $ref: '#/components/responses/UnprocessableEntity'

  /rooms:
    post:
      summary: 'Creates a room'
      operationId: createRoom
      tags:
        - room
      parameters:
        - $ref: '#/components/parameters/apiKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomDTO'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDTO'
        422:
          $ref: '#/components/responses/UnprocessableEntity'

  /allocations:
    get:
      summary: 'Lists allocations'
      operationId: listAllocations
      tags:
        - allocation
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: employeeEmail
          in: query
          description: Email of the employee
          schema:
            type: string
        - name: roomId
          in: query
          description: Room ID
          schema:
            type: integer
            format: int64
        - name: startAt
          in: query
          description: Allocation start time
          schema:
            type: string
            format: date
        - name: endAt
          in: query
          description: Allocation end time
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllocationDTO'

    post:
      summary: 'Creates an allocation'
      operationId: createAllocation
      tags:
        - allocation
      parameters:
        - $ref: '#/components/parameters/apiKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAllocationDTO'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocationDTO'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        404:
          description: Not Found

  /allocations/{id}:
    delete:
      summary: 'Deletes an allocation by ID'
      operationId: deleteAllocation
      tags:
        - allocation
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: id
          in: path
          required: true
          description: ID of the allocation
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: 'Deleted Successfully'
        404:
          description: Not Found
        422:
          $ref: '#/components/responses/UnprocessableEntity'

    put:
      summary: 'Updates an allocation by ID'
      operationId: updateAllocation
      tags:
        - allocation
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: id
          in: path
          required: true
          description: ID of the allocation
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAllocationDTO'
        required: true
      responses:
        204:
          description: 'Updated Successfully'
        404:
          description: Not Found
        422:
          $ref: '#/components/responses/UnprocessableEntity'

  /reports/allocation:
    post:
      tags:
        - report
      summary: Generates the allocation report
      operationId: createAllocationReport
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - name: email
          in: query
          description: The e-mail to send the report
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          description: Start date to filter
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: End date to filter
          required: true
          schema:
            type: string
            format: date
        - name: reportFormat
          in: query
          description: Report format. Can be 'PDF' or 'XML'. Defaults to 'PDF'
          required: false
          schema:
            type: string
      responses:
        201:
          description: Created
        422:
          $ref: '#/components/responses/UnprocessableEntity'

components:
  schemas:
    UpdateRoomDTO:
      type: object
      properties:
        name:
          type: string
        seats:
          type: integer

    CreateRoomDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdateRoomDTO'

    RoomDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateRoomDTO'
        - type: object
          properties:
            id:
              type: integer
              format: int64

    UpdateAllocationDTO:
      type: object
      properties:
        subject:
          type: string
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time

    CreateAllocationDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdateAllocationDTO'
        - type: object
          properties:
            roomId:
              type: integer
              format: int64
            employeeName:
              type: string
            employeeEmail:
              type: string

    AllocationDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateAllocationDTO'
        - type: object
          properties:
            id:
              type: integer
              format: int64

    ResponseError:
      type: object
      required:
        - field
        - errorCode
      properties:
        field:
          type: string
        errorCode:
          type: string

  responses:
    UnprocessableEntity:
      description: The server understands the content type of the request entity but was unable to process
        the contained instructions.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ResponseError'

  parameters:
    orderBy:
      name: orderBy
      in: query
      description: Field to order by
      schema:
        type: string

    limit:
      name: limit
      in: query
      description: Maximum number of returned records
      schema:
        type: integer

    page:
      name: page
      in: query
      description: The page of records to fetch (0 index based)
      schema:
        type: integer

    apiKey:
      name: api-key
      in: header
      description: The API key to authenticate the request
      required: true
      schema:
        type: string